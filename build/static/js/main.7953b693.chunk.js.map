{"version":3,"sources":["actions/usernameAction.js","services/loginService.js","components/LoginForm.js","actions/scoreAction.js","services/registerService.js","components/RegistrationForm.js","components/Restart.js","components/Logout.js","components/AwardInfo.js","components/Score.js","components/Button.js","actions/pushAction.js","App.js","reducers/usernameReducer.js","reducers/scoreReducer.js","reducers/clickReducer.js","reducers/rootReducer.js","store.js","components/AlertTemplate.js","index.js"],"names":["addUsername","username","type","data","loginUser","credentials","a","console","log","axios","post","response","LoginForm","useState","setUsername","password","setPassword","dispatch","useDispatch","handleLogin","event","preventDefault","score","className","onSubmit","htmlFor","value","name","id","required","onChange","target","registerUser","RegistrationForm","passwordAgain","setPasswordAgain","handleRegister","errors","Restart","useSelector","state","onClick","restoreScore","Logout","window","localStorage","removeItem","AwardInfo","clicks","allClicks","counter","Score","Button","alert","useAlert","award","clicksBefore","scoreBefore","push","clicksAfterThis","show","App","usernameReducer","action","scoreReducer","clickReducer","combineReducers","initialState","stateJSON","getItem","JSON","parse","e","loadState","socket","io","middleware","createSocketIoMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","subscribe","getState","stringify","setItem","saveState","alertStyle","backgroundColor","color","fontWeight","padding","borderRadius","display","alignItems","fontFamily","width","AlertTemplate","message","style","ReactDOM","render","template","timeout","position","transition","document","getElementById"],"mappings":"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","file":"static/js/main.7953b693.chunk.js","sourcesContent":["/* Action creator that defines actions for handling username in Redux store. */\n\nexport const addUsername = (username) => ({\n    \n    // Username Redux store\n    type: 'ADD_USERNAME',\n    data: {\n        username: username\n    }\n})\n\nexport const removeUsername = () => ({\n    type: 'REMOVE_USERNAME'\n})\n","// Use axios to connect directly to the server (without redux-socket.io middleware dispatching \n// everything to Redux store)\nimport axios from 'axios'\n\n// Url where server accepts user logins\n//const url = 'http://localhost:8000/login'\n// For production: Url where server accepts user logins\nconst url = 'https://buttongame2020.herokuapp.com/login'\n\n\nexport const loginUser = async (credentials) => {\n    console.log('In login')\n    const response = await axios.post(url, credentials)\n    console.log(response)\n    return response.data\n}\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addUsername } from '../actions/usernameAction'\nimport { addScore } from '../actions/scoreAction'\nimport { loginUser } from '../services/loginService'\n\nconst LoginForm = () => {\n\n    // Form state\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n\n    // Handle the login form send\n    const handleLogin = async (event) => {\n\n        event.preventDefault()\n        \n        try {\n            // Returned info of the user to be saved to Redux store\n            const response = await loginUser({ username, password })\n            // Save username and score to Redux store\n            dispatch(addUsername(response.username))\n            dispatch(addScore(response.score))\n        } catch (e) {\n            // TODO: Inform the user of the problems with login\n            console.log(`Problems with login: ${e}`)\n            // Clear form fields\n            setUsername('')\n            setPassword('')\n        }\n    }\n    \n    return (\n        <div className=\"form\">\n            <h2>Login</h2>\n            <form onSubmit={handleLogin}>\n                <div>\n                    <label htmlFor=\"usernameLogin\">Username</label>\n                    <input\n                    type=\"text\"\n                    value={username}\n                    name=\"username\"\n                    id=\"usernameLogin\"\n                    required\n                    onChange={({ target }) => setUsername(target.value)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"passwordLogin\">Password</label>\n                    <input\n                    type=\"password\"\n                    value={password}\n                    name=\"password\"\n                    id=\"passwordLogin\"\n                    required\n                    onChange={({ target }) => setPassword(target.value)}\n                    />\n                </div>\n                <button type=\"submit\">Login</button>\n            </form>\n        </div>\n    )\n}\n\nexport default LoginForm\n","/* Action creator that defines actions for saving score to Redux store.  */\n\nexport const addScore = (score) => ({\n    type: 'ADD_SCORE',\n    data: {\n        score: score\n    }\n})\n\nexport const createScore = () => ({\n    type: 'CREATE_SCORE',\n    data: {\n        score: 20\n    }\n})\n\nexport const removeScore = () => ({\n    type: 'REMOVE_SCORE'\n})\n\nexport const restoreScore = (username) => ({\n    type: 'server/RESTORE_SCORE',\n    data: {\n        username: username,\n        score: 20\n    }\n})\n","// Use axios to connect directly to the server (without redux-socket.io middleware dispatching \n// everything to Redux store)\nimport axios from 'axios'\n\n// Url where server accepts user registrations\n//const url = 'http://localhost:8000/register'\n// For production: Url where server accepts user registrations\nconst url = 'https://buttongame2020.herokuapp.com/register'\n\nexport const registerUser = async (credentials) => {\n    const response = await axios.post(url, credentials)\n    return response\n}\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addUsername } from '../actions/usernameAction'\nimport { createScore } from '../actions/scoreAction'\nimport { registerUser } from '../services/registerService'\n\nconst RegistrationForm = () => {\n    \n    // Form state\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [passwordAgain, setPasswordAgain] = useState('')\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n\n    const handleRegister = async (event) => {\n\n        event.preventDefault()\n\n        // Check that passwords match\n        if (password === passwordAgain) {\n            try {\n                // TODO: Check if the user is ok. Now server does not send anything back\n                const response = await registerUser({ username, password })\n                console.log('User is ', response)\n                \n                if (response.data.errors) {\n                    // TODO: If server sends error, tell user what needs to be done\n                    console.log('Pick another username.')\n                    // Clear form fields\n                    setUsername('')\n                    setPassword('')\n                    setPasswordAgain('')\n                }\n                // If user was created to the database, add it to Redux store also\n                else {\n                    dispatch(addUsername(response.data.username))\n                    dispatch(createScore())\n                }\n            } catch (e) {\n                // TODO: Inform the user with problems in registration\n                console.log(`Problems with registration: ${e}`)\n                // Clear form fields\n                setUsername('')\n                setPassword('')\n                setPasswordAgain('')\n            }\n        }\n        else {\n            // TODO: Inform the user that passwords did not match\n            console.log('Passwords do not match')\n            // Clear password fields\n            setPassword('')\n            setPasswordAgain('')\n        }\n        \n    }\n\n    return (\n        <div className=\"form\">\n            <h2>Register</h2>\n            <form onSubmit={handleRegister}>\n                <div>\n                    <label htmlFor=\"usernameRegister\">Username</label>\n                    <input\n                    type=\"text\"\n                    value={username}\n                    name=\"username\"\n                    id=\"usernameRegister\"\n                    required\n                    onChange={({ target }) => setUsername(target.value)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"passwordRegister\">Password</label>\n                    <input\n                    type=\"password\"\n                    value={password}\n                    name=\"password\"\n                    id=\"passwordRegister\"\n                    required\n                    onChange={({ target }) => setPassword(target.value)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"passwordAgain\">Password again</label>\n                    <input\n                    type=\"password\"\n                    value={passwordAgain}\n                    name=\"passwordAgain\"\n                    id=\"passwordAgain\"\n                    required\n                    onChange={({ target }) => setPasswordAgain(target.value)}\n                    />\n                </div>\n                <button type=\"submit\">Register</button>\n            </form>\n        </div>\n    )\n}\n\nexport default RegistrationForm\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { restoreScore } from '../actions/scoreAction'\n\nconst Restart = () => {\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    // Username is needed because server must know which user's score to update\n    const username = useSelector(state => state.username)\n    \n    const handleClick = () => {\n        // Restore user's score to 20 points\n        dispatch(restoreScore(username))\n    }\n\n    return (\n        <div>\n            <p>Game over</p>\n            <button onClick={handleClick}>Restart</button>\n        </div>\n    )\n}\n\nexport default Restart\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeUsername } from '../actions/usernameAction'\nimport { removeScore } from '../actions/scoreAction'\n\nconst Logout = () => {\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    \n    const handleClick = () => {\n        // Remove the app state from the browser's local storage\n        window.localStorage.removeItem('appState')\n        // Remove username and score from the Redux store\n        dispatch(removeUsername())\n        dispatch(removeScore())\n    }\n\n    return (\n        <button onClick={handleClick}>Logout</button>\n    )\n}\n\nexport default Logout\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst AwardInfo = () => {\n\n    let clicks = useSelector(state => state.allClicks)\n    let counter = null\n\n    // Next award is 10 clicks away if someone won on last click (i.e. if the amount of clicks in\n    // Redux store can be divided by 10)\n    if (clicks % 10 === 0) {\n        counter = 10\n    }\n    else {\n        // Count clicks to the next award\n        while (!(clicks % 10 === 0)) {\n            counter++;\n            clicks++;\n        }\n    }\n    \n    return (\n        <p>Next award is {counter} click{counter !== 1 ? 's' : ''} away!</p>\n    )\n}\n\nexport default AwardInfo\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Score = () => {\n\n    const score = useSelector(state => state.score)\n    \n    return (\n        <p>{score}</p>\n    )\n}\n\nexport default Score\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAlert } from 'react-alert'\nimport { push } from '../actions/pushAction'\n\nconst Button = () => {\n\n    // Alert will be used if the user wins points on game button click\n    const alert = useAlert()\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    // Info of all clicks and user's score is needed to determine the points that\n    // the user loses or wins after pressing the game button\n    const clicks = useSelector(state => state.allClicks)\n    const score = useSelector(state => state.score) \n    // Username is needed because server must know which user's score to update\n    const username = useSelector(state => state.username)\n\n    // User gets award if the amount of clicks in Redux store after this click can be\n    // divided by 500, 100 or 10\n    let award = null\n\n    const handleClick = () => {\n        dispatch(push(username, clicks, score))\n        // If this was a winning click, show user an alert\n        let clicksAfterThis = clicks + 1\n        if (clicksAfterThis % 500 === 0) {\n            award = 250\n        } else if (clicksAfterThis % 100 === 0) {\n            award = 40\n        } else if (clicksAfterThis % 10 === 0) {\n            award = 5\n        }\n        \n        if (award) {\n            alert.show(<p>+ {award}</p>)\n        }\n    }\n\n    return (\n        <button onClick={handleClick}>Push!</button>\n    )\n}\n\nexport default Button\n","/* Action creator that defines actions based on the total amount of clicks in the game \n   after the game button click.\n*/\n\nexport const push = (username, clicksBefore, scoreBefore) => {\n\n    // User gets points every 500th, 100th and 10th click. Score is updated by 250, 40 or 5 points respectively.\n    // (However, because every click costs 1 point, user is actually given 1 point less than previously mentioned.)\n    // Normal push decreases user's points by 1 point.\n    let score = null\n    let clicks = clicksBefore + 1\n    console.log('Action has clicksBefore: ', clicksBefore, ' and adds it to clicks: ', clicks)\n    if (clicks % 500 === 0) {\n        score = scoreBefore + 249\n        return {\n            type: 'server/PUSH_249_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else if (clicks % 100 === 0) {\n        score = scoreBefore + 39\n        return {\n            type: 'server/PUSH_39_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else if (clicks % 10 === 0) {\n        score = scoreBefore + 4\n        return {\n            type: 'server/PUSH_4_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else {\n        score = scoreBefore - 1\n        return { \n            type: 'server/PUSH',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    }\n}\n","import React from 'react'\nimport './App.css'\nimport { useSelector } from 'react-redux'\nimport LoginForm from './components/LoginForm'\nimport RegistrationForm from './components/RegistrationForm'\nimport Restart from './components/Restart'\nimport Logout from './components/Logout'\nimport AwardInfo from './components/AwardInfo'\nimport Score from './components/Score'\nimport Button from './components/Button'\n\nconst App = () => {\n\n    const username = useSelector(state => state.username)\n    const score = useSelector(state => state.score)\n    \n    return (\n        <div className=\"App\">\n            <h1>Button game</h1>\n\n            {// Show login and registration forms only if there is no username in Redux store.\n            // Otherwise, show logout button, score and game button.\n            username === null\n\n            ?\n\n            <div>\n                <LoginForm />\n                <p>Or if this is your first time here:</p>\n                <RegistrationForm />\n            </div>\n\n            :\n            \n            // If score is 0, give the user an option to logout or restart\n            score <= 0\n            \n            ? \n            \n            <div>\n                <Logout />\n                <Restart />\n            </div>\n            \n            :\n\n            <div>\n                <Logout />\n                <AwardInfo />\n                <Score />\n                <Button />\n            </div>}\n            \n        </div>\n    )\n}\n\nexport default App\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst usernameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        // Action of type ADD_USER happens when the registration or login form is sent\n        case 'ADD_USERNAME':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return action.data.username\n        case 'REMOVE_USERNAME':\n            return null\n        default:\n            return state\n    }\n}\n\nexport default usernameReducer\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst scoreReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        // WHen registration form is sent\n        case 'CREATE_SCORE':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return action.data.score\n        // When the login form is sent\n        case 'ADD_SCORE':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_4_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_39_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_249_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/ADD_20_POINTS':\n            return action.data.score\n        case 'REMOVE_SCORE':\n            return null\n        case 'server/RESTORE_SCORE':\n            return action.data.score\n        default:\n            return state\n    }\n}\n\nexport default scoreReducer\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst clickReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        // When the game button is clicked, an action starting with 'server/PUSH' is dispatched\n        case 'server/PUSH':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return state + 1\n        case 'server/PUSH_4_POINTS':\n            return state + 1\n        case 'server/PUSH_39_POINTS':\n            return state + 1\n        case 'server/PUSH_249_POINTS':\n            return state + 1\n        case 'server/PUSH_20_POINTS':\n            return state + 1\n        case 'server/ALL_CLICKS':\n            return action.allClicks\n        // When someone else has clicked the button, server sends and action of type 'server/ADD_CLICK'\n        case 'server/ADD_CLICK':\n            return state + 1\n        default:\n            return state\n    }\n}\n\nexport default clickReducer\n","import { combineReducers } from 'redux'\nimport usernameReducer from './usernameReducer'\nimport scoreReducer from './scoreReducer'\nimport clickReducer from './clickReducer'\n\nexport default combineReducers({ username: usernameReducer, score: scoreReducer, allClicks: clickReducer })","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport io from 'socket.io-client'\nimport createSocketIoMiddleware from 'redux-socket.io'\n\n// Save app state to the browser's local storage\nconst saveState = (state) => {\n    try {\n        // App state to JSON string\n        const stateJSON = JSON.stringify(state)\n        window.localStorage.setItem('appState', stateJSON)\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Check if there is app state saved in local storage\nconst loadState = () => {\n    try {\n        // Load app state stored in the browser's local storage\n        const stateJSON = window.localStorage.getItem('appState')\n\n        // If no data is saved, return undefined\n        if (!stateJSON) {\n            return undefined\n        }\n\n        return JSON.parse(stateJSON)\n    } catch (e) {\n        console.log(`Error on checking the app state from the browser's local sotrage: ${e}`)\n    }\n}\n\nconst initialState = loadState()\n\n// For local development\n//let socket = io('http://localhost:8000')\n// For production\nlet socket = io('https://buttongame2020.herokuapp.com')\n\n// Use socket io middleware\nconst socketIoMiddleware = createSocketIoMiddleware(socket, \"server/\")\nconst middleware = [socketIoMiddleware]\n\n// Redux devtools extension for Chrome\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(...middleware)))\n\n// Change listener to the store\nstore.subscribe(() => {\n    console.log('New state in Redux store: ', store.getState())\n    saveState(store.getState());\n})\n\nexport default store","import React from 'react'\n\n// Styling for alert message\nconst alertStyle = {\n    backgroundColor: '#61892F',\n    color: 'white',\n    fontWeight: 'bold',\n    padding: '20px',\n    borderRadius: '80px',\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: 'Arial',\n    width: '45px'\n}\n\nconst AlertTemplate = ({ message }) => {\n  return (\n    <div style={{ ...alertStyle }}>\n      <span>{message}</span>\n    </div>\n  )\n}\n\nexport default AlertTemplate\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from './components/AlertTemplate'\n\n// Configure alert message\nconst options = {\n    timeout: 2000,\n    position: 'top center',\n    transition: 'fade'\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App />\n        </AlertProvider>\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}