{"version":3,"sources":["actions/usernameAction.js","services/loginService.js","components/LoginForm.js","actions/scoreAction.js","services/registerService.js","components/RegistrationForm.js","components/Restart.js","components/Logout.js","components/AwardInfo.js","components/Score.js","components/Button.js","actions/pushAction.js","App.js","reducers/usernameReducer.js","reducers/scoreReducer.js","reducers/clickReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["addUsername","username","type","data","loginUser","credentials","a","console","log","axios","post","response","LoginForm","useState","setUsername","password","setPassword","errorMessage","setErrorMessage","dispatch","useDispatch","handleLogin","event","preventDefault","score","className","Alert","variant","Form","onSubmit","Group","Label","htmlFor","Control","value","name","id","required","onChange","target","registerUser","RegistrationForm","passwordAgain","setPasswordAgain","handleRegister","errors","Restart","useSelector","state","onClick","restoreScore","Logout","size","window","localStorage","removeItem","AwardInfo","clicks","allClicks","counter","Score","Button","award","setAward","clicksBefore","scoreBefore","push","clicksAfterThis","setTimeout","App","loginRegister","logout","restart","gameView","Container","usernameReducer","action","scoreReducer","clickReducer","combineReducers","initialState","stateJSON","getItem","JSON","parse","e","loadState","socket","io","middleware","createSocketIoMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","subscribe","getState","stringify","setItem","saveState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa8ad93f.chunk.js","sourcesContent":["/* Action creators that define actions for handling username in Redux store. */\n\nexport const addUsername = (username) => ({\n    \n    // Username Redux store\n    type: 'ADD_USERNAME',\n    data: {\n        username: username\n    }\n})\n\nexport const removeUsername = () => ({\n    type: 'REMOVE_USERNAME'\n})\n","// Use axios to connect directly to the server (without redux-socket.io middleware dispatching \n// everything to Redux store)\nimport axios from 'axios'\n\n// Url where server accepts user logins\n//const url = 'http://localhost:8000/login'\n// For production: Url where server accepts user logins\nconst url = 'https://buttongame2020.herokuapp.com/login'\n\n\nexport const loginUser = async (credentials) => {\n    console.log('In login')\n    const response = await axios.post(url, credentials)\n    console.log(response)\n    return response.data\n}\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addUsername } from '../actions/usernameAction'\nimport { addScore } from '../actions/scoreAction'\nimport { loginUser } from '../services/loginService'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nconst LoginForm = () => {\n\n    // Form state\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n\n    // Handle the login form send\n    const handleLogin = async (event) => {\n\n        event.preventDefault()\n        \n        try {\n            // Returned info of the user to be saved to Redux store\n            const response = await loginUser({ username, password })\n            // Save username and score to Redux store\n            dispatch(addUsername(response.username))\n            dispatch(addScore(response.score))\n        } catch (e) {\n            // Inform the user of the problems with login\n            console.log(`Problems with login: ${e}`)\n            setErrorMessage('Username or password incorrect. Try again!')\n            // Clear form fields\n            setUsername('')\n            setPassword('')\n        }\n    }\n    \n    return (\n        <div className=\"form\">\n            <h2>Login</h2>\n            {(errorMessage &&\n                <Alert variant=\"info\">\n                    {errorMessage}\n                </Alert>\n            )}\n            <Form onSubmit={handleLogin}>\n                <Form.Group>\n                    <Form.Label htmlFor=\"usernameLogin\">Username</Form.Label>\n                    <Form.Control\n                    type=\"text\"\n                    value={username}\n                    name=\"username\"\n                    id=\"usernameLogin\"\n                    required\n                    onChange={({ target }) => setUsername(target.value)}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label htmlFor=\"passwordLogin\">Password</Form.Label>\n                    <Form.Control\n                    type=\"password\"\n                    value={password}\n                    name=\"password\"\n                    id=\"passwordLogin\"\n                    required\n                    onChange={({ target }) => setPassword(target.value)}\n                    />\n                </Form.Group>\n                <Button variant=\"light\" className=\"green-button\" type=\"submit\">Login</Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default LoginForm\n","/* Action creators that define actions for saving score to Redux store.  */\n\nexport const addScore = (score) => ({\n    type: 'ADD_SCORE',\n    data: {\n        score: score\n    }\n})\n\nexport const createScore = () => ({\n    type: 'CREATE_SCORE',\n    data: {\n        score: 20\n    }\n})\n\nexport const removeScore = () => ({\n    type: 'REMOVE_SCORE'\n})\n\nexport const restoreScore = (username) => ({\n    type: 'server/RESTORE_SCORE',\n    data: {\n        username: username,\n        score: 20\n    }\n})\n","// Use axios to connect directly to the server (without redux-socket.io middleware dispatching \n// everything to Redux store)\nimport axios from 'axios'\n\n// Url where server accepts user registrations\n//const url = 'http://localhost:8000/register'\n// For production: Url where server accepts user registrations\nconst url = 'https://buttongame2020.herokuapp.com/register'\n\nexport const registerUser = async (credentials) => {\n    const response = await axios.post(url, credentials)\n    return response\n}\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addUsername } from '../actions/usernameAction'\nimport { createScore } from '../actions/scoreAction'\nimport { registerUser } from '../services/registerService'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nconst RegistrationForm = () => {\n    \n    // Form state\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [passwordAgain, setPasswordAgain] = useState('')\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n\n    const handleRegister = async (event) => {\n\n        event.preventDefault()\n\n        // Check that passwords match\n        if (password === passwordAgain) {\n\n            try {\n                const response = await registerUser({ username, password })\n                \n                if (response.data.errors) {\n                    // Tell the user that username is already in use\n                    console.log('Username already in use. Pick another username.')\n                    setErrorMessage('Username already in use. Pick another one.')\n                    // Clear form fields\n                    setUsername('')\n                    setPassword('')\n                    setPasswordAgain('')\n                }\n                // If user was created to the database, add it to Redux store also\n                else {\n                    dispatch(addUsername(response.data.username))\n                    dispatch(createScore())\n                }\n            } catch (e) {\n                // Inform the user with problems in registration\n                console.log(`Could not register user: ${e}`)\n                setErrorMessage('Could not register user. Try again!')\n                // Clear form fields\n                setUsername('')\n                setPassword('')\n                setPasswordAgain('')\n            }\n        }\n        else {\n            // Inform the user that passwords did not match\n            console.log('Passwords do not match')\n            setErrorMessage('Passwords do not match. Try again!')\n            // Clear password fields\n            setPassword('')\n            setPasswordAgain('')\n        }\n        \n    }\n\n    return (\n        <div className=\"form\">\n            <p id=\"instruction\">Or if this is your first time here:</p>\n            <h2>Register</h2>\n            {(errorMessage &&\n                <Alert variant=\"info\">\n                    {errorMessage}\n                </Alert>\n            )}\n            <Form onSubmit={handleRegister}>\n                <Form.Group>\n                    <Form.Label htmlFor=\"usernameRegister\">Username</Form.Label>\n                    <Form.Control\n                    type=\"text\"\n                    value={username}\n                    name=\"username\"\n                    id=\"usernameRegister\"\n                    required\n                    onChange={({ target }) => setUsername(target.value)}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label htmlFor=\"passwordRegister\">Password</Form.Label>\n                    <Form.Control\n                    type=\"password\"\n                    value={password}\n                    name=\"password\"\n                    id=\"passwordRegister\"\n                    required\n                    onChange={({ target }) => setPassword(target.value)}\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label htmlFor=\"passwordAgain\">Password again</Form.Label>\n                    <Form.Control\n                    type=\"password\"\n                    value={passwordAgain}\n                    name=\"passwordAgain\"\n                    id=\"passwordAgain\"\n                    required\n                    onChange={({ target }) => setPasswordAgain(target.value)}\n                    />\n                </Form.Group>\n                <Button variant=\"light\" className=\"green-button\" type=\"submit\">Register</Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default RegistrationForm\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { restoreScore } from '../actions/scoreAction'\nimport Button from 'react-bootstrap/Button'\n\nconst Restart = () => {\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    // Username is needed because server must know which user's score to update\n    const username = useSelector(state => state.username)\n    \n    const handleClick = () => {\n        // Restore user's score to 20 points\n        dispatch(restoreScore(username))\n    }\n\n    return (\n        <div>\n            <p>Game over</p>\n            <Button variant=\"light\" className=\"green-button\" onClick={handleClick}>Restart</Button>\n        </div>\n    )\n}\n\nexport default Restart\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeUsername } from '../actions/usernameAction'\nimport { removeScore } from '../actions/scoreAction'\nimport Button from 'react-bootstrap/Button'\n\nconst Logout = () => {\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    \n    const handleClick = () => {\n        // Remove the app state from the browser's local storage\n        window.localStorage.removeItem('appState')\n        // Remove username and score from the Redux store\n        dispatch(removeUsername())\n        dispatch(removeScore())\n    }\n\n    return (\n            <Button variant=\"dark\" size=\"sm\" id=\"logout-button\" onClick={handleClick}>Logout</Button>\n    )\n}\n\nexport default Logout\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst AwardInfo = () => {\n\n    let clicks = useSelector(state => state.allClicks)\n    let counter = null\n\n    // Next award is 10 clicks away if someone won on last click (i.e. if the amount of clicks in\n    // Redux store can be divided by 10)\n    if (clicks % 10 === 0) {\n        counter = 10\n    }\n    else {\n        // Count clicks to the next award\n        while (!(clicks % 10 === 0)) {\n            counter++\n            clicks++\n        }\n    }\n    \n    return (\n        <p id=\"award-info\">Next award is only <br /><span>{counter}</span><br /> click{counter !== 1 ? 's' : ''} away!</p>\n    )\n}\n\nexport default AwardInfo\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Score = () => {\n\n    const score = useSelector(state => state.score)\n    \n    return (\n        <p id=\"score\">{score}</p>\n    )\n}\n\nexport default Score\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from '../actions/pushAction'\nimport ButtonBootstrap from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nconst Button = () => {\n\n    // Local state is used to inform the user of possibly on award\n    const [award, setAward] = useState(null)\n\n    // Dispatch is needed to dispatch the state to Redux store\n    const dispatch = useDispatch()\n    // Info of all clicks and user's score is needed to determine the points that\n    // the user loses or wins after pressing the game button\n    const clicks = useSelector(state => state.allClicks)\n    const score = useSelector(state => state.score) \n    // Username is needed because server must know which user's score to update\n    const username = useSelector(state => state.username)\n\n    const handleClick = () => {\n\n        dispatch(push(username, clicks, score))\n\n        // User gets award if the amount of clicks in Redux store after this click can be\n        // divided by 500, 100 or 10\n        // If this was a winning click, show user a notification\n        let clicksAfterThis = clicks + 1\n        if (clicksAfterThis % 500 === 0) {\n\n            // Update award information so the award notification will be shown\n            setAward('+ 250')\n\n            // Show award information only for 2 seconds. After that, set back to null\n            setTimeout(() => {\n                setAward(null)\n            }, 2000)\n\n        } else if (clicksAfterThis % 100 === 0) {\n            setAward('+ 40')\n            setTimeout(() => {\n                setAward(null)\n            }, 2000)\n        } else if (clicksAfterThis % 10 === 0) {\n            setAward('+ 5')\n            setTimeout(() => {\n                setAward(null)\n            }, 2000)\n        }\n    }\n\n    return (\n        <div>\n            {(award &&\n                <Alert variant=\"success\" id=\"award\">\n                    <p>{award}</p>\n                </Alert>\n            )}\n            <ButtonBootstrap variant=\"light\" id=\"gamebutton\" onClick={handleClick}></ButtonBootstrap>\n        </div>\n    )\n}\n\nexport default Button\n","/* Action creators that define actions based on the total amount of clicks in the game \n   after the game button click.\n*/\n\nexport const push = (username, clicksBefore, scoreBefore) => {\n\n    // User gets points every 500th, 100th and 10th click. Score is updated by 250, 40 or 5 points respectively.\n    // (However, because every click costs 1 point, user is actually given 1 point less than previously mentioned.)\n    // Normal push decreases user's points by 1 point.\n    let score = null\n    let clicks = clicksBefore + 1\n    console.log('Action has clicksBefore: ', clicksBefore, ' and adds it to clicks: ', clicks)\n    if (clicks % 500 === 0) {\n        score = scoreBefore + 249\n        return {\n            type: 'server/PUSH_249_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else if (clicks % 100 === 0) {\n        score = scoreBefore + 39\n        return {\n            type: 'server/PUSH_39_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else if (clicks % 10 === 0) {\n        score = scoreBefore + 4\n        return {\n            type: 'server/PUSH_4_POINTS',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    } else {\n        score = scoreBefore - 1\n        return { \n            type: 'server/PUSH',\n            data: {\n                username: username,\n                allClicks: clicks,\n                score: score\n            }\n        }\n    }\n}\n","import React from 'react'\nimport './App.css'\nimport { useSelector } from 'react-redux'\nimport LoginForm from './components/LoginForm'\nimport RegistrationForm from './components/RegistrationForm'\nimport Restart from './components/Restart'\nimport Logout from './components/Logout'\nimport AwardInfo from './components/AwardInfo'\nimport Score from './components/Score'\nimport Button from './components/Button'\nimport Container from 'react-bootstrap/Container'\n\nconst App = () => {\n\n    const username = useSelector(state => state.username)\n    const score = useSelector(state => state.score)\n    \n    let loginRegister\n    let logout\n    let restart\n    let gameView\n\n    // Show login and registration forms only if there is no username in Redux store.\n    // (The app saves Redux store in browser's local storage and deletes it's contents only\n    // on logout. This makes the user stay logged in automatically.)\n    if (!username) {\n\n        loginRegister = <>\n                            <LoginForm />\n                            <RegistrationForm />\n                        </>\n\n    } else {\n\n        // If there is a username in the Redux store give the user an option to logout.\n        logout= <Logout />\n\n        // If there is a username and the user's score is 0 or less give option to restart.\n        if (score <= 0) {\n\n            restart = <Restart />\n\n        } else {\n\n            // Otherwise, show logout button, award info (how many clicks is needed to earn more points), \n            // score and game button\n            gameView =  <>\n                            <AwardInfo />\n                            <div id=\"score-award-button\">\n                                <Score />\n                                <Button />\n                            </div>\n                        </>\n        }\n    }\n\n    return  (\n        <Container>\n            {logout}\n            <Container id=\"game\">\n                <h1>Button game</h1>\n                {loginRegister}\n                {restart}\n                {gameView}\n            </Container>\n        </Container>\n    )\n    \n}\n\nexport default App\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst usernameReducer = (state = initialState, action) => {\n    switch (action.type) {\n        // Action of type ADD_USER happens when the registration or login form is sent\n        case 'ADD_USERNAME':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return action.data.username\n        case 'REMOVE_USERNAME':\n            return null\n        default:\n            return state\n    }\n}\n\nexport default usernameReducer\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst scoreReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        // WHen registration form is sent\n        case 'CREATE_SCORE':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return action.data.score\n        // When the login form is sent\n        case 'ADD_SCORE':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_4_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_39_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/PUSH_249_POINTS':\n            return action.data.score\n        // When the game button is pushed and new score is updated\n        case 'server/ADD_20_POINTS':\n            return action.data.score\n        case 'REMOVE_SCORE':\n            return null\n        case 'server/RESTORE_SCORE':\n            return action.data.score\n        default:\n            return state\n    }\n}\n\nexport default scoreReducer\n","// Initial state before registering or login is null\nconst initialState = null\n\nconst clickReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        // When the game button is clicked, an action starting with 'server/PUSH' is dispatched\n        case 'server/PUSH':\n            // Clicking the game button adds 1 click to the total amount of clicks in the game\n            // to the Redux store\n            return state + 1\n        case 'server/PUSH_4_POINTS':\n            return state + 1\n        case 'server/PUSH_39_POINTS':\n            return state + 1\n        case 'server/PUSH_249_POINTS':\n            return state + 1\n        case 'server/PUSH_20_POINTS':\n            return state + 1\n        case 'server/ALL_CLICKS':\n            return action.allClicks\n        // When someone else has clicked the button, server sends and action of type 'server/ADD_CLICK'\n        case 'server/ADD_CLICK':\n            return state + 1\n        default:\n            return state\n    }\n}\n\nexport default clickReducer\n","import { combineReducers } from 'redux'\nimport usernameReducer from './usernameReducer'\nimport scoreReducer from './scoreReducer'\nimport clickReducer from './clickReducer'\n\nexport default combineReducers({ username: usernameReducer, score: scoreReducer, allClicks: clickReducer })","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport io from 'socket.io-client'\nimport createSocketIoMiddleware from 'redux-socket.io'\n\n// Save app state to the browser's local storage\nconst saveState = (state) => {\n    try {\n        // App state to JSON string\n        const stateJSON = JSON.stringify(state)\n        window.localStorage.setItem('appState', stateJSON)\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Check if there is app state saved in local storage\nconst loadState = () => {\n    try {\n        // Load app state stored in the browser's local storage\n        const stateJSON = window.localStorage.getItem('appState')\n\n        // If no data is saved, return undefined\n        if (!stateJSON) {\n            return undefined\n        }\n\n        return JSON.parse(stateJSON)\n    } catch (e) {\n        console.log(`Error on checking the app state from the browser's local sotrage: ${e}`)\n    }\n}\n\nconst initialState = loadState()\n\n// For local development\n//let socket = io('http://localhost:8000')\n// For production\nlet socket = io('https://buttongame2020.herokuapp.com')\n\n// Use socket io middleware\nconst socketIoMiddleware = createSocketIoMiddleware(socket, \"server/\")\nconst middleware = [socketIoMiddleware]\n\n// Redux devtools extension for Chrome\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(...middleware)))\n\n// Change listener to the store\nstore.subscribe(() => {\n    console.log('New state in Redux store: ', store.getState())\n    saveState(store.getState());\n})\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}